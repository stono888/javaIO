java.io.File表示文件（目录）
File类只表示文件的信息，位置、大小等，不能进行文件的访问

RandomAccessFile java提供的对文件内容的访问，即可以读文件，也可以写文件
RandomAccessFile支持随机访问文件，可以访问文件的任意位置

(1)java文件模型
    在硬盘上面，文件是byte byte byte存储，是数据的集合；
(2)打开文件，
    有两种模式，"rw"(读写),"r"(只读)
RandomAccessFile raf = new RandomAccessFile(file,"rw");
    文件指针，打开文件时，指针在开头 pointer ==0 ；
(3)写方法
   raf.write(int);--->只写一个字节（后8位），同时指针指向下一个位置，准备下次写
(4)读取文件   
   int b = raf.read();--->读一个字节
(5)文件读写完成以后，一定要关闭（Oracle官方说明）

IO流（输入流、输出流）
字节流、字符流
1，字节流
1）InputStream/OutputSteam 抽象类
  InputStream抽象了应用程序读取数据的方式
  OutputStream抽象了应用程序写出数据的方式
2）EOF = END 读到-1就读到结尾
3）输入流基本方法
	int b = in.read();读取一个字节无符号填充到int的低八位；-1是EOF
	in.read(byte[] buf);读取数据直接填充字节数组buf
	in.read(byte[] buf,int start,int size);读取数据到字节数组buf；从buf的start位置开始，存放size长度；
4）输出流基本方法
	out.write(int b);写出一个byte到流，b的低八位；
	out.write(byte[] buf);将buf字节数组都写入到流；
	out.write(byte[] buf,int start,int size);字节数组buf从start位置开始写size长度的字节到流；
5）FileInputStream 继承了InputStream，具体实现了在文件上面读取数据；
6）FileOutputStream 实现了向文件中写出byte数据的方法；
7）DataOutputStream/DataInputStream
  对“流”功能的扩展，可以更加方便的读取int、long、字符等类型数据
  DataOutputStream
  	writeInt();writeDouble();writeUTF();//用包装模式实现的；
8）BufferedInputStream/BufferedOutputStream
  这两个流为IO提供了带缓冲区的操作；一般打开文件进行写入
  或者读取操作时，都会加上缓冲；这种流模式提高了IO的性能；
  从应用程序中，把数据放入文件，相当于将一缸水倒入到另一个缸中；
  FileOutputStream--->write()方法，相当于一滴一滴的把水转过去；
  DataOutputStream--->writeXxx()方法，会方便一些，相当于一瓢一瓢的来转过去；
  BufferedOutputStream--->writeXxx()方法，更方便，相当于一瓢一瓢水先放入桶中，再从桶倒入到另一缸中；
2.字符流
1）编码问题
2）认识文本和文本文件
java的文本(char)是16位无符合整数；是字符unicode编码（双字节编码）  
文件是byte byte byte...的数据序列
文本文件是文本（char）按照某种编码方案（utf-8,utf-16be,gbk）序列化为byte byte byte...的存储集合；
3）字符流（Reader Writer）--->操作的是文本文件；
字符的处理，一次处理一个字符；
字符的底层，仍然是基础的字节序列；
字符流的基本实现
	InputStreamReader 完成byte流解析为char流，按照编码解析；
	OutputStreamWriter 提供char流到byte流，按照编码处理；

	FileReader/FileWriter
  
  	
